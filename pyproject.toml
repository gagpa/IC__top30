[tool.poetry]
name = "lumi-bot"
version = "0.1.0"
description = ""
authors = [
    "Igor Beschastnov <beschastnov-iv@mosmetro.ru>",
    "Nikita Cherenkov <cherenkov-ni@mosmetro.ru>"
]

[build-system]
requires = ["poetry>=1.1.8"]
build-backend = "poetry.masonry.api"

[tool.poetry.dependencies]
python = "^3.8"
# For scripts
colorama = "^0.4.4"
inquirer = "^2.9.1"
click = "^8.0.4"
# Main
aiogram = "^2.19"
SQLAlchemy = {extras = ["asyncio"], version = "^1.4.32"}
alembic = "^1.7.7"
asyncpg = "^0.25.0"  # main app
arq = "^0.22"
aioredis = ">=1.1.0,<2.0.0"
pydantic = "^1.9.0"
psycopg2-binary = "^2.9.3"  # alembic
python-jose = {extras = ["cryptography"], version ="^3.3.0"}
bcrypt = "^3.1.7"
ujson = "^1.35"  # used by pydantic for parsing
fastapi = "^0.65.1"
uvicorn = {extras = ["standard"], version ="^0.16.0"}

[tool.poetry.dev-dependencies]
autoflake = "^1.4"
black = "^22"
factory-boy = "^3.2.0"
flake8 = "^3.9.0"
flake8-annotations-complexity = "^0.0.6"
flake8-bandit = "^2.1.2"
flake8-breakpoint = "^1.1.0"
flake8-bugbear = "^21.3.2"
flake8-builtins = "^1.5.3"
flake8-comprehensions = "^3.4.0"
flake8-eradicate = "^1.0.0"
flake8-expression-complexity = "^0.0.9"
flake8-isort = "^4.0.0"
flake8-print = "^4.0.0"
flake8-pytest = "^1.3"
flake8-pytest-style = "^1.4.0"
flake8-requirements = "^1.4.0"
flake8-return = "^1.1.2"
isort = "^5.10.0"
mypy = "^0.812"
pep8-naming = "^0.11.1"
pylint = "^2.12.2"
pytest = "^6.2.2"
pytest-cov = "^2.11.1"
pytest-deadfixtures = "^2.2.1"
pytest-mock = "^3.6.0"
requests = "^2.25.1"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
allow_redefinition = true
warn_unused_ignores = true
warn_return_any = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false

[tool.pylint.'MESSAGES CONTROL']
fail-under = 10
disable = [
    "import-error",
    "too-few-public-methods",
    "duplicate-code",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "redefined-outer-name",
    "no-name-in-module",
]
ignored-classes = [
    "contextlib.closing",
    "sqlalchemy.orm.scoping.scoped_session",
]

[tool.pytest.ini_options]
addopts = "-ra --strict-markers --log-level=DEBUG --cov=server"
testpaths = [
    "tests",
]

[tool.coverage.run]
omit = [
    ".venv/*",
    " tests/*",
    "**/__main__.py",
]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
lines_after_imports = 1
known_first_party = [
    "settings",
    "database",
    "common",
    "utils",
    "schemas",
]

[tool.black]
line-length = 100
skip-string-normalization = true